export default class Observer{constructor(){this.listeners={},this.thresholds=[.8],this.nodes=[],this.intersectionObserverCallback=this.intersectionObserverCallback.bind(this),this.setup=this.setup.bind(this)}intersectionObserverCallback(e){e.forEach(e=>{const s=parseFloat(e.target.dataset.intersectionRatio);if(e.isIntersecting&&e.intersectionRatio>=s){const s=e.target.dataset.instanceIndex;this.listeners[s]()}})}register(e,s,t){if("IntersectionObserver"in window){if(this.listeners[e]=s,t.dataset.intersectionRatio){const e=parseFloat(t.dataset.intersectionRatio);this.thresholds.includes(e)||this.thresholds.push(e)}this.nodes.push(t),this.observer&&this.observer.observe(t)}else s()}unregister(e){"IntersectionObserver"in window&&this.observer&&this.observer.unobserve(e)}setup(){"IntersectionObserver"in window&&(this.observer=new IntersectionObserver(this.intersectionObserverCallback,{threshold:this.thresholds}),this.nodes.forEach(e=>{this.observer.unobserve(e),this.observer.observe(e)}))}}
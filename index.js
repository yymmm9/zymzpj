import SmoothScroll from"/components/SmoothScroll.js";import Works from"/components/Works.js";import DraggableCarousel from"/components/DraggableCarousel.js";import AnimatedText from"/components/AnimatedText.js";import TrailImage from"/components/TrailImage.js";import Unsplash from"/components/Unsplash.js";import Inverter from"/components/Inverter.js";import Anchor from"/components/Anchor.js";import WorkLine from"/components/WorkLine.js";import Observer from"/utils/Observer.js";import Ouch from"/components/Ouch.js";import AnimatedWord from"/components/AnimatedWord.js";const MODULES=[SmoothScroll,Works,Unsplash,DraggableCarousel,AnimatedText,TrailImage,Anchor,WorkLine,Inverter,Ouch,AnimatedWord];class App{constructor(){this.lastIndex=0,this.initApp=this.initApp.bind(this),this.initClones=this.initClones.bind(this),this.onScroll=this.onScroll.bind(this),this.onResize=this.onResize.bind(this),this.prepareToInitApp=this.prepareToInitApp.bind(this),window.addEventListener("load",this.prepareToInitApp),window.addEventListener("resize",this.onResize),window.addEventListener("scroll",this.onScroll)}prepareToInitApp(){document.querySelector(".loader").classList.add("loader--hidden"),"serviceWorker"in navigator&&navigator.serviceWorker.register("/sw.js").then(function(e){},function(e){}),this.initApp()}initApp(){this.lastIndex=0,this.Observer=new Observer,this.instances=MODULES.flatMap(e=>{if(!e.hasOwnProperty("selector"))return;return[...document.querySelectorAll(e.selector)].map(t=>{return t.setAttribute("data-instance-index",this.lastIndex),this.lastIndex++,new e(t)})}),this.instances.forEach(e=>{e.onReady&&e.onReady()}),this.instances.forEach(e=>{e.onComplete&&e.onComplete()}),this.Observer&&this.Observer.setup()}initClones(){this.instances=this.instances.concat(MODULES.flatMap(e=>{if(!e.hasOwnProperty("selector"))return;return[...document.querySelectorAll(e.selector)].map(t=>{const n=t.getAttribute("data-instance-index");return n&&""!==n?null:(t.setAttribute("data-instance-index",this.lastIndex),this.lastIndex++,new e(t))}).filter(e=>!!e)}))}onResize(e){this.instances&&this.instances.forEach(t=>{t.onResize&&t.onResize(e)})}onScroll(e){this.instances&&this.instances.forEach(t=>{t.onScroll&&t.onScroll(e)})}}window.App=new App;export const getInstance=e=>{const t=e.getAttribute("data-instance-index");return t?window.App.instances[parseInt(t,10)]:null};export const getObserver=()=>window.App.Observer;